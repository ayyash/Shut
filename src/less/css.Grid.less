@import (reference) 'utilities/media.less';

/* CRITICAL BEGIN */
/* affects wrapper and site width */

.w100 {
    width: 100%!important;
}
.h100 {
    height: 100%;
}


.generate-column(@column, @key: c) when (@column > 0) {
    .generate-column((@column - 1), @key);
    .@{key}-@{column},
    &.u@{key}-@{column} > li {
        width: percentage(@column / @wrapper);
    }
}


.generate-offset(@column, @key: c) when (@column > 0) {
    .generate-offset((@column - 1), @key);
    .offset-@{key}-@{column} {
        margin-left: percentage(@column / @wrapper);
    }
}

// spaced out begins at md only
.generate-spaced-column(@column, @key: c) when (@column > 0) {
    .generate-spaced-column((@column - 1), @key);
    > .@{key}-@{column},
    &.u@{key}-@{column} > li {
        width: calc(percentage(@column / @wrapper) - @halfspace);
    }
}

.generate-min-heights(@from, @to) {

    each(range(@from,@to), {
        .h-@{value},
        .uh-@{value} > li {
            min-height: (@grid-column-height) * @value;
        }
    });
}

.generate-max-heights(@from, @to) {

    each(range(@from,@to), {
        .hm-@{value},
        .uhm-@{value} > li {
            max-height: (@grid-column-height) * @value;
        }
    });
}

// TODO: make variable
.generate-min-heights(1, 6);
.generate-max-heights(1, 6);

// default for small screens all percentages apply only for xs
// then col.md apply 100% for small screens
// then col.lg apply 100% for small screens
.row, .row-spaced {
    display: flex;
    flex-wrap: wrap;
}
.row-spaced {
    justify-content: space-between;
}

.col,
.ucol > li {
    width: 100%;
}

.generate-offset(11);
.generate-column(12);

.row-spaced {
    .generate-spaced-column(12);
}

// grid
.generate-grid(@column, @key: g) when (@column > 0) {
    .generate-grid((@column - 1), @key);
    .@{key}-@{column} {
        grid-template-columns: percentage(@column / @wrapper) auto;
        
    }
}
.grid {
    display: grid;
	
}
.grid.spacedout {
    grid-gap: @space;
}
.generate-grid(11);



.media(md, {
    
    .generate-offset(11, md);
    .generate-grid(11, gmd);
    .generate-column(12, md);
    
    .row-spaced {
        .generate-spaced-column(12, md);
    }
    
    
});

.media(lg, {
    
    .generate-offset(11, lg);
    .generate-grid(11, glg);
    
    .generate-column(12, lg); 
    
    .row-spaced {
        .generate-spaced-column(12, lg);
    }
    
});

/* CRITICAL END */