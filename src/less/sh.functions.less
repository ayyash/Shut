

.clearfix() {
	zoom: 1;

	&:before,
	&:after {
		content: "";
		display: table;
		zoom: 1;
		
	}

	&:after {
		clear: both;
	}
}

.reset() {

	* {
		margin: 0;
		padding: 0;
		.box-sizing(border-box);
	}

	ul, li {
		list-style: none;
	}

	fieldset, form, iframe {
		border: 0;
	}

	textarea {
		overflow: auto;
		resize: vertical;
	}

	em {
		font-style: normal;
	}

	img {
		border: 0 none;
		-moz-user-select: none;
		-khtml-user-select: none;
	}

	// abbr, article, aside, audio, canvas, datalist, details,
	// figure, footer, header, hgroup, menu, meter, nav, output,
	// progress, section, summary, time, video {
	// 	display: block;
	// }

	// time, mark {
	// 	display: inline;
	// }

	form {
		display: inline;
	}
}

/* Border Radius*/
.border-radius(@radius: 2px) {
	#border-radius > .all(@radius);
}

#border-radius {
	.all (@radius: 2px) when (@radius > 0) {
		-webkit-border-radius: @radius;
		-moz-border-radius: @radius;
		border-radius: @radius;
	}

	.topright(@radius: 2px) when (@radius > 0){
		-webkit-border-top-right-radius: @radius;
		-moz-border-radius-topright: @radius;
		border-top-right-radius: @radius;
	}

	.topleft(@radius: 2px)  when (@radius > 0){
		-webkit-border-top-left-radius: @radius;
		-moz-border-radius-topleft: @radius;
		border-top-left-radius: @radius;
	}

	.bottomright(@radius: 2px)  when (@radius > 0){
		-webkit-border-bottom-right-radius: @radius;
		-moz-border-radius-bottomright: @radius;
		border-bottom-right-radius: @radius;
	}

	.bottomleft(@radius: 2px)  when (@radius > 0){
		-webkit-border-bottom-left-radius: @radius;
		-moz-border-radius-bottomleft: @radius;
		border-bottom-left-radius: @radius;
	}
}
/* Drop shadows*/
.box-shadow(@shadow) {
	-webkit-box-shadow: @shadow;
	-moz-box-shadow: @shadow;
	-ms-box-shadow: @shadow;
	box-shadow: @shadow;
}

.box-sizing(@sizing) {
	-moz-box-sizing: @sizing;
	box-sizing: @sizing;
}

.transition(@transition) {
	-webkit-transition: @transition;
	-moz-transition: @transition;
	-ms-transition: @transition;
	-o-transition: @transition;
	transition: @transition;
}

.transform(@transform) {
	-webkit-transform: @transform;
	-moz-transform: @transform;
	-ms-transform: @transform;
	-o-transform: @transform;
	transform: @transform;
}

/* Opacity*/
.opacity(@opacity: 100) {
	filter: e(%("alpha(opacity=%d)", @opacity));
	-khtml-opacity: @opacity / 100;
	-moz-opacity: @opacity / 100;
	opacity: @opacity / 100;
}
/* desaturation */
.grayscale(@grayscale: 100%) {
	-webkit-filter: grayscale(@grayscale);
	-moz-filter: grayscale(@grayscale);
	-ms-filter: grayscale(@grayscale);
	-o-filter: grayscale(@grayscale);
	filter: grayscale(@grayscale);
	filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale"); /* Firefox 10+, Firefox on Android */
	filter: gray;
}

.animation(@animation) {
	/* Safari and Chrome: */
	-webkit-animation: @animation;
	-moz-animation: @animation;
	animation: @animation;
}


/* coloring forground */
.fcolor (@c) when (lightness(@c) >= 50%) {
  color: @color;
}
.fcolor (@c) when (lightness(@c) < 50%) {
  color: @inversecolor;
}

.gradient (@startColor, @startStop, @endColor, @endStop: 100%)  {

	background: -webkit-linear-gradient(@startColor @startStop, @endColor @endStop); /* For Safari 5.1 to 6.0 */
	background: -o-linear-gradient(@startColor @startStop, @endColor @endStop); /* For Opera 11.1 to 12.0 */
	background: -moz-linear-gradient(@startColor @startStop, @endColor @endStop); /* For Firefox 3.6 to 15 */
	background: linear-gradient(@startColor @startStop, @endColor @endStop); /* Standard syntax */
}


.gradient (@startColor, @startStop, @endColor, @endStop, @dir) when ( @dir='h') {

	background: -webkit-linear-gradient(left, @startColor @startStop, @endColor @endStop); /* For Safari 5.1 to 6.0 */
	background: -o-linear-gradient(right, @startColor @startStop, @endColor @endStop); /* For Opera 11.1 to 12.0 */
	background: -moz-linear-gradient(right, @startColor @startStop, @endColor @endStop); /* For Firefox 3.6 to 15 */
	background: linear-gradient(right, @startColor @startStop, @endColor @endStop); /* Standard syntax */
}


.rotate(@deg, @origin: center center) {
	transform: rotate(@deg);
	transform-origin: @origin;
	-ms-transform: rotate(@deg); /* IE 9 */
	-ms-transform-origin: @origin; /* IE 9 */
	-webkit-transform: rotate(@deg); /* Safari and Chrome */
	-webkit-transform-origin: @origin; /* Safari and Chrome */
}

.arrowreset() {
	right: auto;
	bottom: auto;
	left: auto;
	top: auto;
	border: 1px solid;
}

#arrow {

	.above(@arrowWidth: 5px) {
		/* reset first */
		left: 45%;
		top: -@arrowWidth;
		border-width: 0 @arrowWidth @arrowWidth;
		border-style: solid;
		border-top-color: transparent;
		border-top-color: fadeout(#fff, 100%);
		border-right-color: transparent;
		border-right-color: fadeout(#fff, 100%);
		border-left-color: transparent;
		border-left-color: fadeout(#fff, 100%);
	}

	.left(@arrowWidth: 5px) {
		top: 30%;
		left: -@arrowWidth - 1;
		border-width: (@arrowWidth + 1);
		border-left-width: 0;
		border-style: solid;
		border-top-color: transparent;
		border-top-color: fadeout(#fff, 100%);
		border-bottom-color: transparent;
		border-bottom-color: fadeout(#fff, 100%);
		border-left-color: transparent;
		border-left-color: fadeout(#fff, 100%);
	}

	.below(@arrowWidth: 5px) {
		left: 45%;
		bottom: -@arrowWidth;
		border-width: @arrowWidth @arrowWidth 0;
		border-style: solid;
		border-right-color: transparent;
		border-right-color: fadeout(#fff, 100%);
		border-bottom-color: transparent;
		border-bottom-color: fadeout(#fff, 100%);
		border-left-color: transparent;
		border-left-color: fadeout(#fff, 100%);
	}

	.right(@arrowWidth: 5px) {
		top: 30%;
		right: -@arrowWidth;
		border-width: @arrowWidth 0 @arrowWidth @arrowWidth;
		border-style: solid;
		border-top-color: transparent;
		border-top-color: fadeout(#fff, 100%);
		border-right-color: transparent;
		border-right-color: fadeout(#fff, 100%);
		border-bottom-color: transparent;
		border-bottom-color: fadeout(#fff, 100%);
	}
}

#pointer {
	.left(@arrowWidth: 6px) {
		margin-right: @arrowWidth + 2;
		.arrowreset();
		#arrow > .left(@arrowWidth);
	}

	.up(@arrowWidth: 6px) {
		margin-right: @arrowWidth + 2;
		.arrowreset();
		#arrow > .above(@arrowWidth);
	}

	.down(@arrowWidth: 6px) {
		margin-right: @arrowWidth + 2;
		.arrowreset();
		#arrow > .below(@arrowWidth);
	}

	.right(@arrowWidth: 6px) {
		margin-right: @arrowWidth + 2;
		.arrowreset();
		#arrow > .right(@arrowWidth);
	}

	.diagonalupleft(@arrowWidth: 8px) {
		margin-right: @arrowWidth;
		.arrowreset();
		#arrow > .right(@arrowWidth);
		border-top-width: 0;
	}

	.diagonalupright(@arrowWidth: 8px) {
		margin-right: @arrowWidth;
		.arrowreset();
		#arrow > .left(@arrowWidth);
		border-top-width: 0;
	}

	.diagonaldownleft(@arrowWidth: 8px) {
		margin-right: @arrowWidth;
		.arrowreset();
		#arrow > .right(@arrowWidth);
		border-bottom-width: 0;
	}

	.diagonaldownright(@arrowWidth: 8px) {
		margin-right: @arrowWidth;
		/* reset */
		.arrowreset();
		#arrow > .left(@arrowWidth);
		border-bottom-width: 0;
	}
}

/* rem */

#rem {

	.font-size(@value) {
		font-size: @value * 10px;
	}

	.font-size(@value) when (@rem-enabled) {
		font-size: @value * 1rem;
	}
}


/* icons*/

.symbolDef() {
	font-family: @iconfont;
	text-transform: none;
	font-style: normal;
	display: inline-block;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	font-smooth: always;
	/* Enable Ligatures ================ */
	letter-spacing: 0;
	-webkit-font-feature-settings: "liga";
	-moz-font-feature-settings: "liga=1";
	-moz-font-feature-settings: "liga";
	-ms-font-feature-settings: "liga" 1;
	-o-font-feature-settings: "liga";
	font-feature-settings: "liga";
	/* ligatures? */
	content: attr(data-icon);
}

/*using ligature */
i {
	font-style: normal;
	display: inline-block;
	.symbolDef();
}


.icon(@name, @value) {
	.@{name} {
		&:before {
			content: @value;
		}
	}
}

.displaySymbol(@value) {
	/*this is for plain icons*/
	content: @value;
	font-family: @iconfont;
}

.getSymbol(@value) {
	&:extend(.symbol all);

	&:before {
		content: @value;
	}
}

.getSymbol(@value,@dir) when(@dir = "after") {
	.symbolAfter;

	&:after {
		content: @value;
	}
}

.changeSymbol(@value) {
	&:before {
		content: @value;
	}
}

.changeSymbol(@value,@dir) when(@dir = "after") {
	&:after {
		content: @value;
	}
}
